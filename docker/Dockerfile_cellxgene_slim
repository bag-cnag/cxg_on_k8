ARG PYTHON__V=3.11
# ARG PYTHON__V=3.8

FROM python:${PYTHON__V}-slim-bookworm AS base

ENV LC_ALL=C.UTF-8
ENV LANG=C.UTF-8

ARG PYTHON__V
ENV NUMPY__V=1.24.4
ENV PYTHONPATH=/usr/local/lib/python${PYTHON__V}/site-packages/
# ------------------------------------------------------------------------------
FROM base AS builder

ENV LLVM_CONFIG=/usr/lib/llvm14/bin/llvm-config

# Build dependencies
RUN apt-get update                    && \
    apt-get -y install bash              && \
    apt-get -y install build-essential   && \
    apt-get -y install jq                && \
    apt-get -y install git               && \
    apt-get -y install libhdf5-dev       && \
    apt-get -y install python3-pkgconfig && \
    apt-get -y install python3-dev       && \
    apt-get -y install nodejs            && \
    apt-get -y install npm               && \
    apt-get -y install llvm-dev          && \
    apt-get -y install libblas-dev       && \
    apt-get -y install cpio


# Python build dependencies
RUN python3 -m pip install -U pip        && \
    python3 -m pip install -U Cython     && \
    python3 -m pip install -U setuptools && \
    python3 -m pip install -U wheel

# Numpy needs to be explicitly installed else numba build will fail during
# installation of the requirements
RUN ln -s locale.h /usr/include/xlocale.h && \
    python3 -m pip install numpy==$NUMPY__V

# Needed so that numpy shared objects appear in the path
RUN ln -s ${PYTHONPATH}numpy/core/include/numpy /usr/local/include/numpy

# Fetching sources and applying fixes:
#  - Upgrade: Flask, boto, s3fs, fssepec, numpy 
#  - limit Werkzeug version as new update (3.0.0) breaks server
#  - np.bool deprecated since numpy 1.20 -> replace by bool
#  - Replace Flask.json.JSONEncoder by json.JSONEncoder in utils.py
#  - Sets (s3) region name to false in default_config.py
#  - Add --legacy-peer-deps and --openssl-legacy-provider flags to npm commands in makefiles
#  - Extra Makefile entry to build a wheel
WORKDIR /
# RUN git clone --single-branch --depth 1 https://github.com/chanzuckerberg/cellxgene.git
# ffcf6eb5d842972f2562c359cc2276a0fbbe77d5
RUN mkdir cellxgene
WORKDIR /cellxgene
# Copies a single commit: lighter and fixes the version
RUN git init && \
    git remote add origin https://github.com/chanzuckerberg/cellxgene.git  && \
    git fetch --depth 1 origin ffcf6eb5d842972f2562c359cc2276a0fbbe77d5 && \
    git checkout FETCH_HEAD

RUN cp ./environment.default.json /environment.default.json
RUN sed -i 's/np.bool/bool/g'                      server/data_common/data_adaptor.py    && \
    printf "\nWerkzeug<=2.3.7"              >>     server/requirements.txt               && \
    sed -i '/^boto3>/ s/=.*/=1.27.47/'             server/requirements.txt               && \
    sed -i '/^anndata/ s/==.*$/==0.9.2/'           server/requirements.txt               && \
    sed -i '/^Flask>/ s/,.*$/,<3.0.0/'             server/requirements.txt               && \
    sed -i '/^numpy>/ s/=.*$/=1.24.4/'             server/requirements.txt               && \
    sed -i '/^fsspec>/ s/,.*$//'                   server/requirements.txt               && \
    sed -i '/^s3fs==/ s/==.*$/==2023.9.0/'         server/requirements.txt               && \
    sed -i '10s/^/from json import JSONEncoder\n/' server/common/utils/utils.py          && \
    sed -i 's/json.JSONEncoder/JSONEncoder/g'      server/common/utils/utils.py          && \
    sed -i '/region_name/ s/:.*$/: false/'         server/default_config.py              && \
    sed -i 's/npm ci/npm ci --legacy-peer-deps/'   client/Makefile                       && \
    sed -i '6s/^/WHEELBUILD := $(BUILDDIR)\/lib\/server\n/' Makefile                     && \
    printf '\n\
build_wheel: build                                                                       \n\
	$(call copy_client_assets,$(CLIENTBUILD),$(WHEELBUILD))                              \n\
pywheel:                                                                                 \n\
	NODE_OPTIONS=--openssl-legacy-provider $(MAKE) build_wheel                           \n\
	python setup.py bdist_wheel -d wheel\n' >> Makefile

# Build the wheel and install to /inst
RUN make pywheel && \
    mkdir /inst  && \
    pip install wheel/cellxgene*.whl -t /inst/

# ------------------------------------------------------------------------------
FROM base AS final

# Get install result
COPY --from=builder /inst /inst

# Dispatch artefacts
RUN mv /inst/bin/* /usr/local/bin && rm -r /inst/bin/
RUN mv /inst/* $PYTHONPATH
RUN rm -rf /inst

# Relink numpy
RUN ln -s ${PYTHONPATH}numpy/core/include/numpy /usr/local/include/numpy

# ------------------------------------------------------------------------------
FROM scratch

# Keep only the root: drops intermediate layers
COPY --from=final / /

# Add user: cellxgeneuser, -> gives ownership over /data 
ARG UID=1000
ARG GID=1000

RUN mkdir /data                           && \
    addgroup --gid "${GID}" cellxgeneuser && \
    adduser --no-create-home                 \
            --disabled-password              \
            --uid "${UID}" --gid "${GID}"    \
            cellxgeneuser                 && \
    chown -R cellxgeneuser:cellxgeneuser /data

ENTRYPOINT ["cellxgene"]
CMD ["launch", "--help"]
